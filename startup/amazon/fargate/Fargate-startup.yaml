AWSTemplateFormatVersion: '2010-09-09'
Description: 'Fargate Cold/Warm Start Time Test Infrastructure'

Parameters:
  TestImage:
    Type: String
    # Default: '970089764833.dkr.ecr.us-east-2.amazonaws.com/ecr-public/eks-distro/kubernetes-csi/livenessprobe:v2.15.0-eks-1-33-9' # 120mb public image
    Default: '970089764833.dkr.ecr.us-east-2.amazonaws.com/gengdy/pixeks-spike-worker:1.0' # 150mb private image
    Description: Container image to use for testing

  ExecutionRoleArn:
    Type: String
    Description: ARN of the IAM Role for task execution (must have permissions to pull images and

Resources:
  # VPC和网络配置
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # VPC Endpoints 
  ECRApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PublicSubnet
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref TestSecurityGroup

  ECRDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PublicSubnet
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref TestSecurityGroup

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PublicRouteTable


  # 安全组
  TestSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for test tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow inbound HTTPS for VPC Endpoint
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic

  # ECS集群
  TestCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'fargate-startup-test-cluster'

  # # 任务执行角色
  # TaskExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: ecs-tasks.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # 测试任务定义
  TestTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: 'startup-test-task'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      # ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ExecutionRoleArn: !Ref ExecutionRoleArn
      # 如果你的任务本身也需要权限（而不仅仅是拉镜像和写日志），你还需要TaskRoleArn。
      # TaskRoleArn: !Ref ExecutionRoleArn 
      ContainerDefinitions:
        - Name: 'test-container'
          Image: !Ref TestImage
          Essential: true
          Command:
            - sh
            - -c
            - 'echo "Container started at: $(date +%s%N)" && sleep 300' # 运行5分钟以便测量
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'test'

  # CloudWatch日志组
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/ecs/startup-test'
      RetentionInDays: 1

Outputs:
  ClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref TestCluster
    
  TaskDefinitionArn:
    Description: ARN of the Task Definition
    Value: !Ref TestTaskDefinition
    
  SubnetId:
    Description: ID of the Public Subnet
    Value: !Ref PublicSubnet
    
  SecurityGroupId:
    Description: ID of the Security Group
    Value: !Ref TestSecurityGroup
    
  LogGroupName:
    Description: Name of the CloudWatch Log Group
    Value: !Ref LogGroup
